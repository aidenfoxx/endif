import { TextureFormat, textureInit } from '../../entities/texture';
import { ddsParse } from './dds';

jest.mock('../../entities/texture', () => ({
  ...jest.requireActual('../../entities/texture'),
  textureInit: jest.fn(),
}));

describe('dds', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should parse dxt1 dds', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0a, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x31, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0xe5, 0x2f, 0x00, 0xbd, 0x00,
        0x2b,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([0x08, 0x40, 0xe5, 0x2f, 0x00, 0xbd, 0x00, 0x2b]),
      4,
      4,
      TextureFormat.DXT1,
      4,
      []
    );
  });

  test('should parse dxt3 dds', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0a, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x33, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x74,
        0xfb, 0x06, 0x30, 0xe0, 0x07, 0x00, 0xad, 0x00, 0x00,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x74, 0xfb, 0x06, 0x30, 0xe0, 0x07, 0x00, 0xad, 0x00,
        0x00,
      ]),
      4,
      4,
      TextureFormat.DXT3,
      8,
      []
    );
  });

  test('should parse dxt5 dds', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0a, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xb9, 0xff, 0xff, 0xff, 0xff, 0x0f,
        0xe6, 0x06, 0x30, 0xe0, 0x07, 0x00, 0xad, 0x00, 0x00,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0x3b, 0xb9, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xe6, 0x06, 0x30, 0xe0, 0x07, 0x00, 0xad, 0x00,
        0x00,
      ]),
      4,
      4,
      TextureFormat.DXT5,
      8,
      []
    );
  });

  test('should parse 24bpp rgb dds', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
        0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f,
        0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00,
        0x3f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0xbf,
        0xbf, 0xbf, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x00,
        0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf,
        0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0xbf, 0xbf, 0xbf, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f,
        0x00, 0x00, 0x00,
      ]),
      4,
      4,
      TextureFormat.RGB,
      24,
      []
    );
  });

  test('should parse 24bpp bgr dds', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00,
        0x00, 0x7f, 0x00, 0x00, 0x3f, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00,
        0x3f, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0xbf,
        0xbf, 0xbf, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x00,
        0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf,
        0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0xbf, 0xbf, 0xbf, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f,
        0x00, 0x00, 0x00,
      ]),
      4,
      4,
      TextureFormat.RGB,
      24,
      []
    );
  });

  test('should parse 32bpp rgba dds', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x02, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
        0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0xbf, 0x00, 0x00,
        0xff, 0x7f, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xbf,
        0x00, 0xff, 0x00, 0x7f, 0x00, 0xff, 0x00, 0x3f, 0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00,
        0x00, 0xbf, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x3f,
        0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0xff,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xff, 0x00, 0x00, 0xff, 0xbf, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00,
        0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xbf, 0x00, 0xff, 0x00, 0x7f, 0x00, 0xff, 0x00, 0x3f,
        0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xbf, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00,
        0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xbf,
        0x00, 0x00, 0x00, 0xff,
      ]),
      4,
      4,
      TextureFormat.RGBA,
      32,
      []
    );
  });

  test('should parse 32bpp bgra dds', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x02, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xbf,
        0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x3f, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xbf,
        0x00, 0xff, 0x00, 0x7f, 0x00, 0xff, 0x00, 0x3f, 0x00, 0xff, 0xff, 0x00, 0x00, 0xff, 0xbf,
        0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x3f,
        0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0xff,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xff, 0x00, 0x00, 0xff, 0xbf, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00,
        0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xbf, 0x00, 0xff, 0x00, 0x7f, 0x00, 0xff, 0x00, 0x3f,
        0x00, 0xff, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0xbf, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00,
        0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xbf,
        0x00, 0x00, 0x00, 0xff,
      ]),
      4,
      4,
      TextureFormat.RGBA,
      32,
      []
    );
  });

  test('should parse dds with mipmaps', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x02, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
        0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f,
        0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00,
        0x3f, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x3f, 0xbf,
        0xbf, 0xbf, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x70, 0x70, 0x00, 0x30,
        0x30, 0x00, 0x50, 0x50, 0xbf, 0x10, 0x10, 0x3f, 0x40, 0x40, 0x40,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(expect.any(Uint8Array), 4, 4, TextureFormat.RGB, 24, [
      expect.objectContaining([
        0x70, 0x70, 0x00, 0x30, 0x30, 0x00, 0x50, 0x50, 0xbf, 0x10, 0x10, 0x3f,
      ]),
      expect.objectContaining([0x40, 0x40, 0x40]),
    ]);
  });

  test('should parse dxt dds with mipmaps', () => {
    ddsParse(
      new Uint8Array([
        0x44, 0x44, 0x53, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0a, 0x00, 0x04, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x31, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 0xe5, 0x2f, 0x00, 0xbd, 0x00,
        0x2b, 0x87, 0x73, 0x88, 0x10, 0xcc, 0x66, 0xcc, 0x66, 0x08, 0x42, 0x08, 0x42, 0x00, 0x00,
        0x00, 0x00,
      ]).buffer
    );

    expect(textureInit).toHaveBeenCalledWith(expect.any(Uint8Array), 4, 4, TextureFormat.DXT1, 4, [
      expect.objectContaining([0x87, 0x73, 0x88, 0x10, 0xcc, 0x66, 0xcc, 0x66]),
      expect.objectContaining([0x08, 0x42, 0x08, 0x42, 0x00, 0x00, 0x00, 0x00]),
    ]);
  });

  test.todo('should throw on invalid magic');

  test.todo('should throw on invalid format');
});
