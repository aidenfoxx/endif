import { ddsParse } from './dds';
import { TextureFormat, textureInit } from '../texture';

jest.mock('../texture', () => ({
  ...jest.requireActual('../texture'),
  textureInit: jest.fn()
}))

describe('dds', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should parse dxt1 dds', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0A, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x40, 0xE5, 0x2F, 0x00, 0xBD, 0x00, 0x2B
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([0x08, 0x40, 0xE5, 0x2F, 0x00, 0xBD, 0x00, 0x2B]),
      4,
      4,
      TextureFormat.DXT1,
      4,
      []
    );
  });

  test('should parse dxt3 dds', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0A, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x74, 0xFB, 0x06, 0x30, 0xE0, 0x07, 0x00, 0xAD, 0x00, 0x00
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x74, 0xFB, 0x06, 0x30, 0xE0, 0x07, 0x00, 0xAD, 0x00, 0x00
      ]),
      4,
      4,
      TextureFormat.DXT3,
      8,
      []
    );
  });

  test('should parse dxt5 dds', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0A, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x3B, 0xB9, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xE6, 0x06, 0x30, 0xE0, 0x07, 0x00, 0xAD, 0x00, 0x00
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0x3B, 0xB9, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xE6, 0x06, 0x30, 0xE0, 0x07, 0x00, 0xAD, 0x00, 0x00
      ]),
      4,
      4,
      TextureFormat.DXT5,
      8,
      []
    );
  });

  test('should parse 24bpp rgb dds', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
      0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
      0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00,
      0x7F, 0x00, 0x00, 0x3F, 0xBF, 0xBF, 0xBF, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
        0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00,
        0x7F, 0x00, 0x00, 0x3F, 0xBF, 0xBF, 0xBF, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00
      ]),
      4,
      4,
      TextureFormat.RGB,
      24,
      []
    );
  });

  test('should parse 24bpp bgr dds', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
      0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0xFF, 0x00, 0x00,
      0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x7F, 0x00,
      0x00, 0x3F, 0x00, 0x00, 0xBF, 0xBF, 0xBF, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00,
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
        0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00,
        0x7F, 0x00, 0x00, 0x3F, 0xBF, 0xBF, 0xBF, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00
      ]),
      4,
      4,
      TextureFormat.RGB,
      24,
      []
    );
  });

  test('should parse 32bpp rgba dds', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
      0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xFF, 0x00, 0x00, 0xFF, 0xBF, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0xFF,
      0x00, 0xFF, 0x00, 0xFF, 0x00, 0xBF, 0x00, 0xFF, 0x00, 0x7F, 0x00, 0xFF, 0x00, 0x3F, 0x00, 0xFF,
      0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xBF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x3F, 0xFF,
      0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0xFF,
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xFF, 0x00, 0x00, 0xFF, 0xBF, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0xFF,
        0x00, 0xFF, 0x00, 0xFF, 0x00, 0xBF, 0x00, 0xFF, 0x00, 0x7F, 0x00, 0xFF, 0x00, 0x3F, 0x00, 0xFF,
        0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xBF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x3F, 0xFF,
        0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0xFF
      ]),
      4,
      4,
      TextureFormat.RGBA,
      32,
      []
    );
  });

  test('should parse 32bpp bgra dds', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
      0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xBF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x3F, 0xFF,
      0x00, 0xFF, 0x00, 0xFF, 0x00, 0xBF, 0x00, 0xFF, 0x00, 0x7F, 0x00, 0xFF, 0x00, 0x3F, 0x00, 0xFF,
      0xFF, 0x00, 0x00, 0xFF, 0xBF, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0xFF,
      0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0xFF,
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xFF, 0x00, 0x00, 0xFF, 0xBF, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x00, 0xFF,
        0x00, 0xFF, 0x00, 0xFF, 0x00, 0xBF, 0x00, 0xFF, 0x00, 0x7F, 0x00, 0xFF, 0x00, 0x3F, 0x00, 0xFF,
        0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xBF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x3F, 0xFF,
        0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0xFF
      ]),
      4,
      4,
      TextureFormat.RGBA,
      32,
      []
    );
  });

  test('should parse dds with mipmaps', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x0F, 0x10, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
      0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
      0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00,
      0x7F, 0x00, 0x00, 0x3F, 0xBF, 0xBF, 0xBF, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00,
      0x70, 0x70, 0x00, 0x30, 0x30, 0x00, 0x50, 0x50, 0xBF, 0x10, 0x10, 0x3F, 0x40, 0x40, 0x40
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.any(Uint8Array),
      4,
      4,
      TextureFormat.RGB,
      24,
      [
        expect.objectContaining([0x70, 0x70, 0x00, 0x30, 0x30, 0x00, 0x50, 0x50, 0xBF, 0x10, 0x10, 0x3F]),
        expect.objectContaining([0x40, 0x40, 0x40]),
      ]
    );
  });

  test('should parse dxt dds with mipmaps', () => {
    ddsParse(new Uint8Array([
      0x44, 0x44, 0x53, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x07, 0x10, 0x0A, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x44, 0x58, 0x54, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x40, 0xE5, 0x2F, 0x00, 0xBD, 0x00, 0x2B, 0x87, 0x73, 0x88, 0x10, 0xCC, 0x66, 0xCC, 0x66,
      0x08, 0x42, 0x08, 0x42, 0x00, 0x00, 0x00, 0x00
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.any(Uint8Array),
      4,
      4,
      TextureFormat.DXT1,
      4,
      [
        expect.objectContaining([0x87, 0x73, 0x88, 0x10, 0xCC, 0x66, 0xCC, 0x66]),
        expect.objectContaining([0x08, 0x42, 0x08, 0x42, 0x00, 0x00, 0x00, 0x00]),
      ]
    );
  });
});
