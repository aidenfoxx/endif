import { TextureFormat, textureInit } from '../texture';
import { tgaParse } from './tga';

jest.mock('../texture', () => ({
  ...jest.requireActual('../texture'),
  textureInit: jest.fn()
}))

describe('tga', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should parse 24bpp tga', () => {
    tgaParse(new Uint8Array([
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00,
      0x18, 0x00, 0xBF, 0xBF, 0xBF, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0x00,
      0x00, 0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F, 0x00, 0x00
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0xBF, 0xBF, 0xBF, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x3F
      ]),
      4,
      4,
      TextureFormat.RGB,
      24
    );
  });

  test('should parse 32bpp tga', () => {
    tgaParse(new Uint8Array([
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00,
      0x20, 0x08, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00,
      0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xBF, 0x00, 0x00, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0x3F, 0x00,
      0x00, 0xFF
    ]).buffer);

    expect(textureInit).toHaveBeenCalledWith(
      expect.objectContaining([
        0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0xFF,
        0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xBF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x3F, 0xFF
      ]),
      4,
      4,
      TextureFormat.RGBA,
      32
    );
  });
});
